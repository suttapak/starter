services:
  proxy:
    container_name: proxy
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend

    restart: "unless-stopped"
  frontend:
    build:
      context: ./apps/www
      dockerfile: Dockerfile.dev
    volumes:
      - ./apps/www/src:/usr/src/app/src
      - ./apps/www/public:/usr/src/app/public

    restart: always

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    # ports:
    #   - "3003:8080"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app
  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/data/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d${POSTGRES_DB}'"]
      interval: 30s
      timeout: 10s
      retries: 5
  adminer:
    image: adminer
    restart: always
    # ports:
    #   - "8080:8080"
networks:
  default:
    name: root_network
    external: true
