/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PublicAboutRouteImport } from './routes/_public/about'
import { Route as AuthedVerifyEmailSuccessRouteImport } from './routes/_authed/verify-email-success'
import { Route as AuthedProfileRouteImport } from './routes/_authed/profile'
import { Route as AuthedTeamIndexRouteImport } from './routes/_authed/team/index'
import { Route as AuthedTeamNewRouteImport } from './routes/_authed/team/new'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PublicAboutRoute = PublicAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => PublicRoute,
} as any)
const AuthedVerifyEmailSuccessRoute =
  AuthedVerifyEmailSuccessRouteImport.update({
    id: '/verify-email-success',
    path: '/verify-email-success',
    getParentRoute: () => AuthedRoute,
  } as any)
const AuthedProfileRoute = AuthedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTeamIndexRoute = AuthedTeamIndexRouteImport.update({
  id: '/team/',
  path: '/team/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedTeamNewRoute = AuthedTeamNewRouteImport.update({
  id: '/team/new',
  path: '/team/new',
  getParentRoute: () => AuthedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/profile': typeof AuthedProfileRoute
  '/verify-email-success': typeof AuthedVerifyEmailSuccessRoute
  '/about': typeof PublicAboutRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof PublicIndexRoute
  '/team/new': typeof AuthedTeamNewRoute
  '/team': typeof AuthedTeamIndexRoute
}
export interface FileRoutesByTo {
  '/profile': typeof AuthedProfileRoute
  '/verify-email-success': typeof AuthedVerifyEmailSuccessRoute
  '/about': typeof PublicAboutRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof PublicIndexRoute
  '/team/new': typeof AuthedTeamNewRoute
  '/team': typeof AuthedTeamIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authed/profile': typeof AuthedProfileRoute
  '/_authed/verify-email-success': typeof AuthedVerifyEmailSuccessRoute
  '/_public/about': typeof PublicAboutRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_public/': typeof PublicIndexRoute
  '/_authed/team/new': typeof AuthedTeamNewRoute
  '/_authed/team/': typeof AuthedTeamIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/profile'
    | '/verify-email-success'
    | '/about'
    | '/login'
    | '/register'
    | '/'
    | '/team/new'
    | '/team'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/profile'
    | '/verify-email-success'
    | '/about'
    | '/login'
    | '/register'
    | '/'
    | '/team/new'
    | '/team'
  id:
    | '__root__'
    | '/_authed'
    | '/_public'
    | '/_authed/profile'
    | '/_authed/verify-email-success'
    | '/_public/about'
    | '/_public/login'
    | '/_public/register'
    | '/_public/'
    | '/_authed/team/new'
    | '/_authed/team/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/about': {
      id: '/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_authed/verify-email-success': {
      id: '/_authed/verify-email-success'
      path: '/verify-email-success'
      fullPath: '/verify-email-success'
      preLoaderRoute: typeof AuthedVerifyEmailSuccessRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/profile': {
      id: '/_authed/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthedProfileRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/team/': {
      id: '/_authed/team/'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof AuthedTeamIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/team/new': {
      id: '/_authed/team/new'
      path: '/team/new'
      fullPath: '/team/new'
      preLoaderRoute: typeof AuthedTeamNewRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedRouteChildren {
  AuthedProfileRoute: typeof AuthedProfileRoute
  AuthedVerifyEmailSuccessRoute: typeof AuthedVerifyEmailSuccessRoute
  AuthedTeamNewRoute: typeof AuthedTeamNewRoute
  AuthedTeamIndexRoute: typeof AuthedTeamIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedProfileRoute: AuthedProfileRoute,
  AuthedVerifyEmailSuccessRoute: AuthedVerifyEmailSuccessRoute,
  AuthedTeamNewRoute: AuthedTeamNewRoute,
  AuthedTeamIndexRoute: AuthedTeamIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface PublicRouteChildren {
  PublicAboutRoute: typeof PublicAboutRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAboutRoute: PublicAboutRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
